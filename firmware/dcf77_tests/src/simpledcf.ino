#include "robustDcf.h"

RobustDcf rd(PB6, PC13);

void setup()
{
    Serial1.begin(115200);
    Serial1.println("Hello, I'm awake!");
    // rd.init();
    //summerTimeTest();
}

void loop()
{
    test();
    //runClock();
}

void summerTimeTest()
{
    SecondsDecoder::BITDATA bd;
    bd.validBitCtr = 60;
    Chronos::EpochTime epoch;
    uint64_t buf[] = {
        18611537118911696,
        18611537121014676,
        18611537391524596,
        18611537393638640,
        18611537127282928,
        18611537477528320,
        18611537748099320,
        18611537750221158,
        18611537483890370,
        18611537754415768,
        18611537488084294,
        18611537490182038,
        18611537760682744,
        18611537762801766,
        18611537496441000,
        18611537779578448,
        18611537513239656,
        18611537515334478,
        18611537785875152,
        18611537519511076,
        18611537790056420,
        18611537792145600,
        18611537525815408,
        18611537527923340,
        18611537798438928,
        18611537813124766,
        18611537546789886,
        18611537548896468,
        18611537819405748,
        18611537553065318,
        18611537823616240,
        18611537825702514,
        18611537559380308,
        18611537561460976,
        18611537831987598,
        18611537578237608,
        18611537848787672,
        18611537850886984,
        18611537584542296,
        18611537855077444,
        18611537588745498,
        18611537590836536,
        18611537861365336,
        18611537863459292,
        18611537597108076,
        18611537880229052,
        18611537613913316,
        18611537615994352,
        18611537886513180,
        18611537620180278,
        18611537890727720,
        18611537892830384,
        18611537626475346,
        18611537628570146,
        18611537899112532,
        18611537645341508,
        18611537915902960,
        18611537917994148,
        18611537651644234,
        18611537922166040,
        18611537655854644,
        18611537657936586,
        18611537928478166,
        18611537930575872,
        18611537664230966,
        18611537477713682,
        18611537748183084,
        18611537750280470,
        18611537483933646,
        18611537754478228,
        18611537488137652};

    // 307509694238565948,
    // 307509694509104974,
    // 307509694511189600,
    // 307509694244876232,
    // 307509694515408044,
    // 307509694249068236,
    // 307509694251160278,
    // 307509694521689298,
    // 307509694523799128,
    // 307509694257451096,
    // 307509728967420434,
    // 307509729238022352,
    // 307509729240118296,
    // 307509728973752736,
    // 307509729244306960,
    // 307509728977966616,
    // 307509728980068106,
    // 307509729250603528,
    // 307509729252681280,
    // 307509728986345902,
    // 307509729269471808,
    // 307509729003117094,
    // 307509729005222336,
    // 307509729275759732,
    // 307509729009403168,
    // 307509729279966790,
    // 307509729282038428,
    // 307509729015716380,
    // 307509729017809368,
    // 307509729288336600,
    // 307509729303018968,
    // 307509729036695446,
    // 307509729038790844,
    // 307509729309316002,
    // 307509729042964588,
    // 307509729313511628,
    // 307509729315593544,
    // 307509729049256516,
    // 307509729051371188,
    // 307509729321884372,
    // 307509729068124222,
    // 307509729338686040,
    // 307509729340784302,
    // 307509729074418480,
    // 307509729344977136,
    // 307509729078639578,
    // 307509729080721876,
    // 307509729351241732,
    // 307509729353352842,
    // 307509729087008308,
    // 307509729370113224,
    // 307509729103797900,
    // 307509729105878082,
    // 307509729376423476,
    // 307509729110097568,
    // 307509729380623024,
    // 307509729382714492,
    // 307509729116362532,
    // 307509729118461786,
    // 307509729388993776,
    // 307509729135250852,
    // 307509729405775684,
    // 307509729407879416,
    // 307509729141523138,
    // 307509729412079320,
    // 307509729145748640,
    // 307509729147823378,
    // 307509729418373666,
    // 307509729420460052,
    // 307509729154130832,
    // 307509695681340876,
    // 307509695951827584,
    // 307509695953913360,
    // 307509695687579382,
    // 307509695958109788,
    // 307509695691776686,
    // 307509695693850854,
    // 307509695964385412,
    // 307509695966495314,
    // 307509695700144494,
    // 307509695983284908};
    for (uint8_t i = 0; i < 81; i++)
    {
        uint64_t data = buf[i];
        if (data)
        {
            bd.bitShifter = data;
            rd.updateClock(&bd, &epoch);
        }
    }
}

void runClock()
{
    Chronos::EpochTime unixEpoch;
    if (rd.update(unixEpoch))
    {
        Serial1.println(unixEpoch);
        TimeChangeRule myDST = {"CEST", Last, Sun, Mar, 2, +120}; //Last Sunday of March, at 2AM, go to UTC+120min
        TimeChangeRule mySTD = {"CET", Last, Sun, Oct, 3, +60};   //Last Sunday of October, at 3AM, go to UTC+60min
        Timezone myTZ(myDST, mySTD);
        Chronos::DateTime localTime = myTZ.toLocal(unixEpoch);
        localTime.printTo(Serial1);
        Serial1.println();
    }
}

void test()
{
    SecondsDecoder::BITDATA bd;
    bd.validBitCtr = 60;
    Chronos::EpochTime epoch;
    while (Serial1.available() > 0)
    {
        String str1 = Serial1.readStringUntil('Z');
        uint64_t data = hexStringToUint64(str1);
        if (data)
        {
            bd.bitShifter = data;
            rd.updateClock(&bd, &epoch);
            Serial1.println(epoch);
        }
    }
}

uint64_t hexStringToUint64(String str1)
{
    str1.toUpperCase();
    if (str1.startsWith("0x"))
    {
        str1 = str1.substring(2);
    }
    uint64_t data = 0;
    for (uint8_t i = 0; i < str1.length(); i++)
    {
        char c = str1.charAt(i);
        if (c >= '0' && c <= '9')
        {
            data <<= 4;
            data += c - '0';
        }
        if (c >= 'A' && c <= 'F')
        {
            data <<= 4;
            data += c + 10 - 'A';
        }
    }
    return data;
}